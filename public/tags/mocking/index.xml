<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mocking on jamesatk.in</title>
    <link>https://example.org/tags/mocking/</link>
    <description>Recent content in mocking on jamesatk.in</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Thu, 12 Sep 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://example.org/tags/mocking/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Mocking with dependency injection in Go</title>
      <link>https://example.org/posts/mocking_dependency_injection_go/</link>
      <pubDate>Thu, 12 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://example.org/posts/mocking_dependency_injection_go/</guid>
      <description>This is a pattern I&amp;rsquo;ve used quite a bit at work and is pretty useful for unit testing.&#xA;A scenario Let&amp;rsquo;s suppose we have a service Service which provides various bits of functionality. One such function is registering users. This interfaces with Amazon&amp;rsquo;s Cognito service for identity management, as well as doing other things, like maybe saving them to a database:&#xA;type Service struct{ CognitoClient *cognitoidentityprovider.Client // ...Other fields } func New() *Service { return &amp;amp;Service{ CognitoClient: cognitoidentityprovider.</description>
    </item>
  </channel>
</rss>
